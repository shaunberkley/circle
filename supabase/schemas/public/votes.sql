----------------------------------------------------------------
--                                                            --
--                        public.votes                        --
--                                                            --
----------------------------------------------------------------

-- Functions for tracking last modification time
create extension if not exists moddatetime schema extensions;

----------------------------------------------------------------

drop trigger if exists on_updated_at on votes;

drop function if exists get_vote;

drop table if exists votes;

----------------------------------------------------------------

-- Create a table
create table votes (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now() not null,
  updated_at timestamptz default now() not null,
  user_id uuid references users(id) on delete cascade not null,
  post_id bigint references posts(id) on delete cascade not null,
  is_like smallint default 0 not null,
  is_dislike smallint default 0 not null,
  unique (user_id, post_id)
);
comment on column votes.updated_at is 'on_updated_at';

-- Add table indexing
create index votes_user_id_idx on votes (user_id);
create index votes_post_id_idx on votes (post_id);

-- Secure the table
alter table votes enable row level security;

-- Add row-level security
create policy "Public access for all users" on votes for select to authenticated, anon using ( true );
create policy "User can insert their own votes" on votes for insert to authenticated with check ( (select auth.uid()) = user_id );
create policy "User can update their own votes" on votes for update to authenticated using ( (select auth.uid()) = user_id );
create policy "User can delete their own votes" on votes for delete to authenticated using ( (select auth.uid()) = user_id );

-- Trigger for tracking last modification time
create trigger on_updated_at before update on votes
  for each row execute procedure moddatetime (updated_at);

----------------------------------------------------------------

create or replace function get_vote(postid bigint)
returns table(
	id bigint,
	like_count bigint,
	dislike_count bigint
)
security definer set search_path = public
as $$
begin
	return query
	select v.post_id, sum(v.is_like), sum(v.is_dislike) from votes v where v.post_id = postid group by v.post_id;
end;
$$ language plpgsql;
