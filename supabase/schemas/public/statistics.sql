----------------------------------------------------------------
--                                                            --
--                     public.statistics                      --
--                                                            --
----------------------------------------------------------------

drop function if exists set_statistics;
drop function if exists get_post_rank_by_views;

drop table if exists statistics;

----------------------------------------------------------------

-- Create a table
create table statistics (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now() not null,
  visitor_id uuid not null,
  user_id uuid references users(id) on delete cascade,
  post_id bigint references posts(id) on delete cascade not null,
  title text,
  location text,
  path text,
  referrer text,
  ip inet,
  browser jsonb,
  user_agent text
);

-- Add table indexing
create index statistics_visitor_id_idx on statistics (visitor_id);
create index statistics_user_id_idx on statistics (user_id);
create index statistics_post_id_idx on statistics (post_id);

-- Secure the table
alter table statistics enable row level security;

-- Add row-level security
create policy "Public access for all users" on statistics for select to authenticated, anon using ( true );
create policy "User can insert statistics" on statistics for insert to authenticated with check ( true );
create policy "User can update statistics" on statistics for update to authenticated using ( true );
create policy "User can delete statistics" on statistics for delete to authenticated using ( true );

----------------------------------------------------------------

create or replace function set_statistics(data json)
returns void
security definer set search_path = public
as $$
begin
  insert into statistics
  (visitor_id,user_id,post_id,title,location,path,referrer,ip,browser,user_agent)
  values
  (
    (data ->> 'visitor_id')::uuid,
    (data ->> 'user_id')::uuid,
    (data ->> 'post_id')::bigint,
    (data ->> 'title')::text,
    (data ->> 'location')::text,
    (data ->> 'path')::text,
    (data ->> 'referrer')::text,
    (data ->> 'ip')::inet,
    (data ->> 'browser')::jsonb,
    (data ->> 'user_agent')::text
  );
  perform set_post_views((data->>'post_id')::bigint);
end;
$$ language plpgsql;

----------------------------------------------------------------

create or replace function get_post_rank_by_views(
	userid uuid,
	q text = '',
	order_by text = 'views',
	ascending boolean = true,
	per_page integer = 10,
	page integer = 1,
  head boolean = false
)
returns table(id bigint, path text, title text, views bigint)
security definer set search_path = public
as $$
declare
  _command text;
  _order text;
  _offset integer;
begin
  _command := 'select s.post_id as id, s.path, s.title, count(*) as views
    from statistics s
      join posts p on p.id = s.post_id
      join users u on u.id = p.user_id
  ';

  _order := case when ascending is false then 'desc' else 'asc' end;
  _offset := (page - 1) * per_page;

  if q <> '' then
    _command := _command || ' where u.id = $1 u.title like $2 group by s.post_id, s.path, s.title ';
    if head then
      return query execute format(_command) using userid, q;
    else
      _command := _command || ' order by %I %s limit %s offset %s ';
      return query execute format(_command, order_by, _order, per_page, _offset) using userid, q;
    end if;
  else
    _command := _command || ' where u.id = $1 group by s.post_id, s.path, s.title ';
    if head then
      return query execute format(_command) using userid;
    else
      _command := _command || ' order by %I %s limit %s offset %s ';
      return query execute format(_command, order_by, _order, per_page, _offset) using userid;
    end if;
  end if;

end;
$$ language plpgsql;
