----------------------------------------------------------------
--                                                            --
--                        public.tags                         --
--                                                            --
----------------------------------------------------------------

drop trigger if exists on_updated_at on tags;
drop trigger if exists on_slug_upsert on tags;

drop function if exists unique_tag_slug;
drop function if exists generate_tag_slug;
drop function if exists set_tag;

drop table if exists tags;

----------------------------------------------------------------

-- Create a table
create table tags (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now() not null,
  updated_at timestamptz default now() not null,
  user_id uuid references users(id) on delete cascade not null,
  name text,
  slug text,
  description text
);
comment on column tags.updated_at is 'on_updated_at';

-- Add table indexing
create index tags_name_idx on tags (name);
create index tags_slug_idx on tags (slug);
create index tags_user_id_idx on tags (user_id);
create index tags_user_id_name_idx on tags (user_id, name);
create index tags_user_id_slug_idx on tags (user_id, slug);

-- Secure the table
alter table tags enable row level security;

-- Add row-level security
create policy "Public access for all users" on tags for select to authenticated, anon using ( true );
create policy "User can insert their own tags" on tags for insert to authenticated with check ( (select auth.uid()) = user_id );
create policy "User can update their own tags" on tags for update to authenticated using ( (select auth.uid()) = user_id );
create policy "User can delete their own tags" on tags for delete to authenticated using ( (select auth.uid()) = user_id );

-- Trigger for tracking last modification time
create trigger on_updated_at before update on tags
  for each row execute procedure moddatetime (updated_at);

----------------------------------------------------------------

create or replace function unique_tag_slug()
returns trigger
security definer set search_path = public
as $$
declare
  old_slug text;
  new_slug text;
  slug_exists boolean;
  counter integer := 1;
begin
  old_slug := new.slug;
  new_slug := old_slug;

  select exists(select 1 from tags where user_id = new.user_id and slug = new_slug and id != coalesce(new.id, 0)) into slug_exists;

  while slug_exists loop
    new_slug := old_slug || '-' || counter;
    counter := counter + 1;
    select exists(select 1 from tags where user_id = new.user_id and slug = new_slug and id != coalesce(new.id, 0)) into slug_exists;
  end loop;

  new.slug := new_slug;
  return new;
end;
$$ language plpgsql;

create trigger on_slug_upsert before insert or update of slug on tags
  for each row execute function unique_tag_slug();

----------------------------------------------------------------

create or replace function generate_tag_slug(userid uuid, tagslug text)
returns text
security definer set search_path = public
as $$
declare
  old_slug text;
  new_slug text;
  slug_exists boolean;
  counter integer := 1;
begin
  old_slug := tagslug;
  new_slug := old_slug;

  select exists(select 1 from tags where user_id = userid and slug = new_slug) into slug_exists;

  while slug_exists loop
    new_slug := old_slug || '-' || counter;
    counter := counter + 1;
    select exists(select 1 from tags where user_id = userid and slug = new_slug) into slug_exists;
  end loop;

  return new_slug;
end;
$$ language plpgsql;

----------------------------------------------------------------

create or replace function set_tag(
  userid uuid,
  tagname text,
  tagslug text,
  tagdescription text = null
)
returns setof tags
security definer set search_path = public
as $$
begin

  if exists (select 1 from tags where user_id = userid and slug = tagslug) then
    update tags set name = tagname, slug = tagslug, description = tagdescription where user_id = userid and slug = tagslug;
  else
    insert into tags(user_id, name, slug, description) values(userid, tagname, tagslug, tagdescription);
  end if;

  return query
  select * from tags where user_id = userid and slug = tagslug;
end;
$$ language plpgsql;
