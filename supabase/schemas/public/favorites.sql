----------------------------------------------------------------
--                                                            --
--                      public.favorites                      --
--                                                            --
----------------------------------------------------------------

-- Functions for tracking last modification time
create extension if not exists moddatetime schema extensions;

----------------------------------------------------------------

drop trigger if exists on_updated_at on favorites;

drop function if exists set_favorite;

drop table if exists favorites;

----------------------------------------------------------------

-- Create a table
create table favorites (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now() not null,
  updated_at timestamptz default now() not null,
  user_id uuid references users(id) on delete cascade not null,
  post_id bigint references posts(id) on delete cascade not null,
  is_favorite boolean default false not null,
  unique (user_id, post_id)
);
comment on column favorites.updated_at is 'on_updated_at';

-- Add table indexing
create index favorites_user_id_idx on favorites (user_id);
create index favorites_post_id_idx on favorites (post_id);

-- Secure the table
alter table favorites enable row level security;

-- Add row-level security
create policy "Public access for all users" on favorites for select to authenticated, anon using ( true );
create policy "User can insert their own favorites" on favorites for insert to authenticated with check ( (select auth.uid()) = user_id );
create policy "User can update their own favorites" on favorites for update to authenticated using ( (select auth.uid()) = user_id );
create policy "User can delete their own favorites" on favorites for delete to authenticated using ( (select auth.uid()) = user_id );

-- Trigger for tracking last modification time
create trigger on_updated_at before update on favorites
  for each row execute procedure moddatetime (updated_at);

----------------------------------------------------------------

create or replace function set_favorite(postid bigint, userid uuid, isfavorite boolean)
returns void
security definer set search_path = public
as $$
begin
  if exists (select 1 from favorites where post_id = postid and user_id = userid) then
    update favorites set is_favorite = isfavorite where post_id = postid and user_id = userid;
  else
    insert into favorites(post_id, user_id, is_favorite) values(postid, userid, isfavorite);
  end if;
end;
$$ language plpgsql;
